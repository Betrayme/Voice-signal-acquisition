/*
 * 			广州创龙电子科技有限公司
 *
 * Copyright 2015 Tronlong All rights reserved
 */

/*
 * 功能描述：
 *     本例程将从Line In接口输入的音频数据送到Line Out接口播放。
 *
 */

#include "DSP2833x_Device.h"     // DSP2833x Headerfile Include File
#include "DSP2833x_Examples.h"   // DSP2833x Examples Include File
#include "DSP28x_Project.h"
#include "stdint.h"
#include "FIFO.h"


/*#define BUF_SIZE   1024  */// Sample buffer size

/*#pragma DATA_SECTION(DMABuf1,"DMARAML4");
#pragma DATA_SECTION(DMABuf2,"ZONE7DATA");

volatile Uint16 DMABuf1[BUF_SIZE];
volatile Uint16 DMABuf2[BUF_SIZE];*/

#define BUF_SIZE 300000
volatile Uint16 *DMADest;
volatile Uint16 *DMASource;

//申请内存
#pragma DATA_SECTION(DMABuf,"ZONE7DATA");
volatile int DMABuf[BUF_SIZE];

int* test=&DMABuf[1];
int* test2=&DMABuf[2];

__interrupt void local_DINTCH1_ISR(void);
void init_zone7(void);

// 使用前，声明本文件中的相关函数；
void   I2CA_Init(void);
Uint16 AIC23Write(int Address,int Data);
void Delay(int time);
void delay();
interrupt void  ISRMcbspSend();

void scib_echoback_init(void);
void scib_fifo_init(void);
void scib_xmit(int a);
void scib_msg(char *msg);

int temp1,temp2;

long cnt_max=300000;
long cnt=0;

long S_RAMFIFO;
long Count;

void main(void)//main函数结束后会跳入args_main.c->boot28.asm->exit.c的一个无限for循环中，中断服务函数不会失效
{
    DMADest=&DMABuf[0];
    DMASource=(volatile Uint16 *)(&McbspaRegs.DRR1.all);
    // 0x200000~0x24FFFF共327679个单元
    /*S_RAMFIFO=fifosram_create((long)(327678),1);
    Count = fifo_writeable_item_count(S_RAMFIFO);*/

/*    Uint16 ReceivedChar =0;
    char *msg;*/

	InitSysCtrl();//系统初始化
	InitXintf();

	InitMcbspaGpio();//切换io到Mcbspa模式
	InitScibGpio();//初始化scib用于串口
	InitI2CGpio();//切换io到I2C模式

	// Disable CPU interrupts
	DINT;

	InitPieCtrl();//初始化pie中断

	// Disable CPU interrupts and clear all CPU interrupt flags:
	IER = 0x0000;
	IFR = 0x0000;

	InitPieVectTable();//初始化pie中断向量表

	/*SCIStdioInit();//初始化SCI
    SCIPuts("\r\n ============Test Start===========.\r\n", -1);
    SCIPuts("Welcome to TL28335 Audio Line In Demo application.\r\n\r\n", -1);*/

	I2CA_Init();//初始化i2ca用于配置开启aic23
	
    /*LoopCount = 0;
    ErrorCount = 0;*/

    scib_fifo_init();      // Initialize the SCI FIFO
    scib_echoback_init();  // Initalize SCI for echoback

    ScibRegs.SCIFFRX.bit.RXFFOVRCLR=1;

	AIC23Write(0x00,0x17);
	Delay(100);
	AIC23Write(0x02,0x17);
	Delay(100);
	AIC23Write(0x04,0x7a);
	Delay(100);
	AIC23Write(0x06,0x7f);
	Delay(100);
	AIC23Write(0x08,0x12);//设置模拟通道路径，其中若BYP位置一则模拟输出的数据来源直接绕过ADC与DAC直接将LineIn输出
	Delay(100);
	AIC23Write(0x0A,0x00);
	Delay(100);
	AIC23Write(0x0C,0x00);//电源控制,aic23即开始工作
	Delay(100);
	AIC23Write(0x0E,0x43);//ADC编码格式为DSP模式
	Delay(100);
	AIC23Write(0x10,0x0D);//23 40k 19 8k
	Delay(100);
	AIC23Write(0x12,0x01);
	Delay(100);
	InitMcbspa();          // Initalize the Mcbsp-A

	EALLOW;	// This is needed to write to EALLOW protected registers
	PieVectTable.MRINTA = &ISRMcbspSend;    //给出mcbpsa的中断函数地址
	PieVectTable.DINTCH1= &local_DINTCH1_ISR;
	EDIS;   // This is needed to disable write to EALLOW protected registers

	IER = M_INT7 ;                               //Enable INT7 (7.1 DMA Ch1)
    EnableInterrupts();
    CpuTimer0Regs.TCR.bit.TSS  = 1;               //Stop Timer0 for now
	DMAInitialize();


	// Configure DMA Channel
	    /*DMACH1AddrConfig(DMADest,DMASource);*/
	    DMACH1BurstConfig(0,0,1);         //一次突发传送(burst)传0+1个字，同时源地址不变，目的地址+1
	    DMACH1TransferConfig(0,0,1);      //从DMA开中断到失能DMA中断期间有很多个burst发生，允许发生burst最大数目为1
	    DMACH1WrapConfig(0xFFFF,0,0xFFFF,1);    //0xFFFF大于DMACH1Transferconfig中的TRANSFERSIZE数目故Wrap函数被禁用
	    //Use timer0 to start the x-fer.
	    //Since this is a static copy use one shot mode, so only one trigger is needed
	    //Also using 32-bit mode to decrease x-fer time
	    DMACH1ModeConfig(DMA_MREVTA,PERINT_ENABLE,ONESHOT_ENABLE,CONT_DISABLE,SYNC_DISABLE,SYNC_SRC,OVRFLOW_DISABLE,SIXTEEN_BIT ,CHINT_END,CHINT_ENABLE);

	    StartDMACH1();

	   //Init the timer 0
	   CpuTimer0Regs.TIM.half.LSW = 512;    //load low value so we can start the DMA quickly
	   CpuTimer0Regs.TCR.bit.SOFT = 1;      //Allow to free run even if halted
	   CpuTimer0Regs.TCR.bit.FREE = 1;
	   CpuTimer0Regs.TCR.bit.TIE  = 1;      //Enable the timer0 interrupt signal
	   CpuTimer0Regs.TCR.bit.TSS  = 0;      //restart the timer 0
	PieCtrlRegs.PIECTRL.bit.ENPIE = 1;   // Enable the PIE block
	PieCtrlRegs.PIEIER6.bit.INTx5=1;     // Enable PIE Group 6, INT 5
	IER |= M_INT6;                            // Enable CPU INT6

	EINT;   // Enable Global interrupt INTM
	ERTM;	// Enable Global realtime interrupt DBGM

	while(PieCtrlRegs.PIEIER6.bit.INTx5==1)
	{
	    DmaRegs.CH1.CONTROL.bit.RUN=0x1;  //写1无效???

	    //串口控制
	   /* for(;;)
	    {

	           // Wait for inc character
	           while(ScibRegs.SCIFFRX.bit.RXFFST !=1) { } // wait for XRDY =1 for empty state

	           // Get character
	           ReceivedChar = ScibRegs.SCIRXBUF.all;
	           if(ReceivedChar=='1')
	           {
	               PieCtrlRegs.PIEIER6.bit.INTx5=1;
	           }else if(ReceivedChar=='0')
	               PieCtrlRegs.PIEIER6.bit.INTx5=0;

	           LoopCount++;
	     }*/

	}
	 Uint32 ptr_cnt;
	 /*fifo_read(S_RAMFIFO, (void *)&data);*/
	 if( PieCtrlRegs.PIEIER6.bit.INTx5==0)
	 {

	     /*for(ptr_cnt=0;ptr_cnt<cnt_max1*cnt_max2;ptr_cnt++)
	     {
	         scib_xmit(DMABuf[ptr_cnt]);
	     }*/

	     for(ptr_cnt=0;ptr_cnt<30001;ptr_cnt++)
	     {
	         int a=DMABuf[ptr_cnt];
	         a=a>>8;
	         scib_xmit(a);
	         scib_xmit(DMABuf[ptr_cnt]);
	     }
	     Delay(10000);
	     for(ptr_cnt=30001;ptr_cnt<60001;ptr_cnt++)
	     {
	         int a=DMABuf[ptr_cnt];
	         a=a>>8;
	         scib_xmit(a);
	         scib_xmit(DMABuf[ptr_cnt]);
	     }
	     Delay(10000);
	     for(ptr_cnt=60001;ptr_cnt<90001;ptr_cnt++)
	     {
	         int a=DMABuf[ptr_cnt];
	         a=a>>8;
	         scib_xmit(a);
	         scib_xmit(DMABuf[ptr_cnt]);
	     }
	     Delay(10000);
	     for(ptr_cnt=90001;ptr_cnt<120001;ptr_cnt++)
	     {
	         int a=DMABuf[ptr_cnt];
	         a=a>>8;
	         scib_xmit(a);
	         scib_xmit(DMABuf[ptr_cnt]);
	     }
	     Delay(10000);
	     for(ptr_cnt=120001;ptr_cnt<150001;ptr_cnt++)
	     {
	         int a=DMABuf[ptr_cnt];
	         a=a>>8;
	         scib_xmit(a);
	         scib_xmit(DMABuf[ptr_cnt]);
	     }
	     for(ptr_cnt=150001;ptr_cnt<180001;ptr_cnt++)
	     {
	         int a=DMABuf[ptr_cnt];
	         a=a>>8;
	         scib_xmit(a);
	         scib_xmit(DMABuf[ptr_cnt]);
	     }
	     for(ptr_cnt=180001;ptr_cnt<210001;ptr_cnt++)
	     {
	         int a=DMABuf[ptr_cnt];
	         a=a>>8;
	         scib_xmit(a);
	         scib_xmit(DMABuf[ptr_cnt]);
	     }
	     for(ptr_cnt=210001;ptr_cnt<240001;ptr_cnt++)
	              {
	                  int a=DMABuf[ptr_cnt];
	                  a=a>>8;
	                  scib_xmit(a);
	                  scib_xmit(DMABuf[ptr_cnt]);
	              }
	     for(ptr_cnt=240001;ptr_cnt<270001;ptr_cnt++)
	              {
	                  int a=DMABuf[ptr_cnt];
	                  a=a>>8;
	                  scib_xmit(a);
	                  scib_xmit(DMABuf[ptr_cnt]);
	              }
	     for(ptr_cnt=270001;ptr_cnt<300000;ptr_cnt++)
	              {
	                  int a=DMABuf[ptr_cnt];
	                  a=a>>8;
	                  scib_xmit(a);
	                  scib_xmit(DMABuf[ptr_cnt]);
	              }
	 }
	 while(1)
	 {

	 }

}   // end of main


void I2CA_Init(void)
{
   // Initialize I2C
   I2caRegs.I2CSAR = 0x001A;		// Slave address - EEPROM control code

   #if (CPU_FRQ_150MHZ)             // Default - For 150MHz SYSCLKOUT
        I2caRegs.I2CPSC.all = 14;   // Prescaler - need 7-12 Mhz on module clk (150/15 = 10MHz)
   #endif
   #if (CPU_FRQ_100MHZ)             // For 100 MHz SYSCLKOUT
     I2caRegs.I2CPSC.all = 9;	    // Prescaler - need 7-12 Mhz on module clk (100/10 = 10MHz)
   #endif

   I2caRegs.I2CCLKL = 100;			// NOTE: must be non zero
   I2caRegs.I2CCLKH = 100;			// NOTE: must be non zero
   I2caRegs.I2CIER.all = 0x24;		// Enable SCD & ARDY interrupts

//   I2caRegs.I2CMDR.all = 0x0020;	// Take I2C out of reset
   I2caRegs.I2CMDR.all = 0x0420;	// Take I2C out of reset
   									// Stop I2C when suspended

   I2caRegs.I2CFFTX.all = 0x6000;	// Enable FIFO mode and TXFIFO
   I2caRegs.I2CFFRX.all = 0x2040;	// Enable RXFIFO, clear RXFFINT,

   return;
}

Uint16 AIC23Write(int Address,int Data)
{


   if (I2caRegs.I2CMDR.bit.STP == 1)
   {
      return I2C_STP_NOT_READY_ERROR;
   }

   // Setup slave address
   I2caRegs.I2CSAR = 0x1A;

   // Check if bus busy
   if (I2caRegs.I2CSTR.bit.BB == 1)
   {
      return I2C_BUS_BUSY_ERROR;
   }

   // Setup number of bytes to send
   // MsgBuffer + Address
   I2caRegs.I2CCNT = 2;
   I2caRegs.I2CDXR = Address;
   I2caRegs.I2CDXR = Data;
   // Send start as master transmitter
   I2caRegs.I2CMDR.all = 0x6E20;
   return I2C_SUCCESS;
 
}

void Delay(int time)
{
	int i,j,k=0;
	for(i=0;i<time;i++)
		for(j=0;j<1024;j++)
			k++;
}

void delay(Uint32 k)
{
   while(k--);
}

interrupt void  ISRMcbspSend(void)
{
    DMABuf[cnt]=McbspaRegs.DRR1.all;
    temp2=McbspaRegs.DRR2.all;
    int t=DMABuf[0];

    McbspaRegs.DXR1.all = DMABuf[cnt];
    McbspaRegs.DXR2.all=temp2;
    if(cnt<cnt_max)
    {
            /**((ExRamStart)+(cnt+cnt2*cnt_max1))=temp1;*/
            cnt++;
           /*if(fifo_writeable(S_RAMFIFO))
                   fifo_write(S_RAMFIFO,(void *)&temp1);*/
        }else
        {
            PieCtrlRegs.PIEIER6.bit.INTx5=0;
            PieCtrlRegs.PIEIER6.bit.INTx5=0; //关闭mcbspa中断
            /**((ExRamStart)+(cnt+cnt2*cnt_max1))=temp1;*/
        }
	PieCtrlRegs.PIEACK.all = 0x0020;
	//	PieCtrlRegs.PIEIFR6.bit.INTx5 = 0;
	//	ERTM;

}

// Test 1,SCIA  DLB, 8-bit word, baud rate 0x000F, default, 1 STOP bit, no parity
void scib_echoback_init()
{
    // Note: Clocks were turned on to the Scib peripheral
    // in the InitSysCtrl() function

    ScibRegs.SCICCR.all =0x0007;   // 1 stop bit,  No loopback
                                   // No parity,8 char bits,
                                   // async mode, idle-line protocol
    ScibRegs.SCICTL1.all =0x0003;  // enable TX, RX, internal SCICLK,
                                   // Disable RX ERR, SLEEP, TXWAKE
    ScibRegs.SCICTL2.all =0x0003;
    ScibRegs.SCICTL2.bit.TXINTENA =1;
    ScibRegs.SCICTL2.bit.RXBKINTENA =1;
    #if (CPU_FRQ_150MHZ)
          ScibRegs.SCIHBAUD    =0x0000;  // 460800 baud @LSPCLK = 37.5MHz.
          ScibRegs.SCILBAUD    =0x0009;
    #endif
    #if (CPU_FRQ_100MHZ)
      ScibRegs.SCIHBAUD    =0x0000;  // 115200 baud @LSPCLK = 20MHz.
      ScibRegs.SCILBAUD    =0x0009;
    #endif
    ScibRegs.SCICTL1.all =0x0023;  // Relinquish SCI from Reset
}

// Transmit a character from the SCI
void scib_xmit(int a)
{
    while (ScibRegs.SCIFFTX.bit.TXFFST != 0) {}
    ScibRegs.SCITXBUF=a;

}

void scib_msg(char * msg)
{
    int i;
    i = 0;
    while(msg[i] != '\0')
    {
        scib_xmit(msg[i]);
        i++;
    }
}

// Initalize the SCI FIFO
void scib_fifo_init()
{
    ScibRegs.SCIFFTX.all=0xE040;
    ScibRegs.SCIFFRX.all=0x204f;
    ScibRegs.SCIFFCT.all=0x0;

}

__interrupt void local_DINTCH1_ISR(void)     // DMA Channel 1
{

    PieCtrlRegs.PIEACK.all = PIEACK_GROUP7;
}




//===========================================================================
// No more.
//===========================================================================
